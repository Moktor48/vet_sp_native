To make prisma work, I need to be able to remote connect to my databases!

This means:
1) The app must route the request to my server
2) NGINX will be set up to send the request out
3) perhaps add prisma or some middleman ... oh, express? Oh... I need to be able to connect a prisma request otherwise it is back to SQL?
4) Possible workflow:
    1) Request made to a root:/subdir
    2) Forward to express server
    3) Redirects with internal permissions, maybe with a header check to maintain security
    4) Request forwarded, response returned

Even better:
1) App sends a trigger request to home
2) NGINX forwards to express
3) Express completes queries... 
4) Can I simply connect my app to a web app that exists in order to let it do it's functions as a proxy?

First task: send a request to the server and get data returned 
1) Express makes the request and returns the response 
2) Therefore, the app just needs to send a secure request that tells express what to do 


After all that:
1) Run prisma in express
2) Have app do a simple fetch to the API
3) ??
4) Profit!

Generic type props

Generic component/child:

export default function ApiCall<T>({
  api,
  key,
  setData,
  setLoading,
}: ApiCallProps<T>)

Specific component/parent:

const [data, setData] = useState<TestData>([]);
  const [loading, setLoading] = useState<boolean>(true);
  ApiCall<TestData>({ api: "GET", key: "testdata", setData, setLoading });

  AUTH PROCESS:
  1) Oauth process for app
  **Connects database data from webapp
  **Should link User table

  AUTH/URI programming steps
  1) New table to store oauth providers
  2) Read/Write will be done using bcrypt due to sensitivty of data
  3) mobapp will send the request to express on oauth attempt, pull data, send data, import data to mobapp to complete authentication
  4) This means decryption should occur on the app when it plugs the data into authConfig.ts 

  Login => Oauth => Select provider => api request from express for provider info => query prisma => return => decrypt data => plug data into authConfig to continue the process
  Secondary considerations: 
  1) Do I need a key on mobapp to decrypt, or do I decrypt data BEFORE sending
  2) App built on next app to encrypt initial data
  3) What header/encryption do I have to ensure the mobapp isn't compromised, especially before auth kicks in

  prisma provider query info
  model providers {
    id           String   @id @default(cuid())
    name         String   @unique // Name of the provider, Linkedin/google/etc
    clientId     String //This data should be encrypted
    clientDomain String //This data should be encrypted
    clientSecret String //This data should be encrypted
}
