// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["reactNative"]
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("EXPO_PUBLIC_DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    role          String      @default("guest") // guest, member, admin
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    available     available[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model tiny_post {
    id      String @id @default(cuid())
    content String
}

model task_tracker {
    id       String    @id @default(cuid())
    user_id  String    @db.Text
    task     String    @db.Text
    due      DateTime
    complete Boolean   @default(false)
    assigned DateTime?
}

model available {
    user_id    String
    group_id   String  @default("clinical")
    mondayA    Boolean @default(false)
    mondayB    Boolean @default(false)
    mondayC    Boolean @default(false)
    mondayD    Boolean @default(false)
    tuesdayA   Boolean @default(false)
    tuesdayB   Boolean @default(false)
    tuesdayC   Boolean @default(false)
    tuesdayD   Boolean @default(false)
    wednesdayA Boolean @default(false)
    wednesdayB Boolean @default(false)
    wednesdayC Boolean @default(false)
    wednesdayD Boolean @default(false)
    thursdayA  Boolean @default(false)
    thursdayB  Boolean @default(false)
    thursdayC  Boolean @default(false)
    thursdayD  Boolean @default(false)
    fridayA    Boolean @default(false)
    fridayB    Boolean @default(false)
    fridayC    Boolean @default(false)
    fridayD    Boolean @default(false)
    notes      String? @db.Text

    user User @relation(fields: [user_id], references: [id])

    @@id([group_id, user_id])
}
